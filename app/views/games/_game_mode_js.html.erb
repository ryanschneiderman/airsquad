<script>
	/**************************************************************/
	/************************* <GLOBALS> **************************/
	/**************************************************************/
	var fg_index = 1;
	var two_pt_fg_index = 3;
	var three_pt_fg_index = 5;
	var ft_index = 7;
	var ft_pct_index = 8;


	var curr_player = null; 
	var curr_player_button = null;
	var curr_stat = null;
	var curr_stat_button = null;
	var curr_player_is_opponent = false;
	var on_game_page = false;

	var player_stats_table = document.getElementById("player-stats-table");
	var team_stats_table = document.getElementById("team-stats-table");
	var make_radius = 7;

	var make_selected = false
	var miss_selected = false;

	var horiz_offset = $("#gm-tool-bar").width();
	var vert_offset = $(".container").height() + $("#scoreboard").height();;

	// keep consistent on canvas resize
	var arc_vert_radius = gm_canvas_width/2.343;
	var arc_horiz_radius = gm_canvas_width/2.365;

	var basket_x;
	var basket_y;

	// keep consistent on canvas resize
	var basket_radius = gm_canvas_width/59.855;

	var player_is_selected = false;

	var stat_array = [];
	var stat_array_counter = 0;
	var display_stats = [];

	var all_stat_granules = [];

	var all_players = [];
	var active_players = [];
	var players_in_game = 0;


	var home_score = 0;
	var opponent_score = 0;

	var opponent_obj;

	var team_stat_totals = [];

	var periods = 4;
	var curr_period = 1;
	var minutes_per_period = 6;
	var minutes = minutes_per_period;
	var seconds = 0;

	var minutes_index;
	var points_index;

	var total_minutes = 0;

	var select_inactives_html = "";

	console.log(gm_canvas_width)

	$( window ).load(function() {
  		canvas.getObjects().forEach(function(o){
			if (o.type == "Basket"){
				basket_x = o.left + basket_radius;
				basket_y = o.top + basket_radius;
			}
		});
	});


	canvas.on('object:moving', function (e) {
		var obj = e.target
        var type = obj.get('type');
        var point = canvas.getPointer(e);
        if(type == "MakeSymbol"){
        	move_make(obj, point)
        }
        else if (type == "MissSymbol"){
         move_miss(obj, point);
        }
    });

    $(window).resize(function(){
        canvas.getObjects().forEach(function(o){
        	switch(o.type){
        		case "MakeSymbol" :
	        		old_canvas_width = o.canvas_width;
	        		change_ratio = old_canvas_width/gm_canvas_width;

	        		o.set({left: o.left/ change_ratio, top: o.top / change_ratio, canvas_width: gm_canvas_width});
	        		o.setCoords();
	        		canvas.calcOffset();
	  				canvas.renderAll();
        		break;
        		case "Basket" :
        			old_canvas_width = o.canvas_width;
	        		change_ratio = old_canvas_width/gm_canvas_width;
	        		basket_radius = basket_radius /change_ratio

	        		o.set({left: o.left/ change_ratio, top: o.top / change_ratio, canvas_width: gm_canvas_width, radius: basket_radius});
	        		o.setCoords();
	        		canvas.calcOffset();
	  				canvas.renderAll();
	  			break;
        		case "MissSymbol" :
        			old_canvas_width = o.canvas_width;
	        		change_ratio = old_canvas_width/gm_canvas_width;
	        		o.set({x1: o.x1 / change_ratio, y1: o.y1 / change_ratio, x2: o.x2 / change_ratio, y2: o.y2 / change_ratio, canvas_width: gm_canvas_width});
	        		o.setCoords();
	        		canvas.calcOffset();
	        		canvas.renderAll();
        		break
        	}
    	})
    })


	Element.prototype.remove = function() {
    	this.parentElement.removeChild(this);
	}		


	$(document).click(function(event) {
		var classname = $(event.target).attr('class')
		if(curr_player != null ){
			if (classname != "player-button" && classname != "stat-button"){
				player_buttons = document.getElementsByClassName('player-button');
				stat_buttons = document.getElementsByClassName('stat-button');
				for(var i = 0; i < player_buttons.length; i++){
					deselect_button(player_buttons[i]);
				}
				for(var i = 0; i < stat_buttons.length; i++){
					deselect_button(stat_buttons[i]);
				}
				curr_player = null;
				curr_player_button = null;
			}
		}
	});


	function find_player(player){
		if(player.player == false){
			return opponent_obj;
		}
    	var length = stat_array.length
    	for(var i = 0; i < length; i++){
    		if (player.id == parseInt(stat_array[i].player_obj.id)){
    			return stat_array[i];
    		}
    	}
    }




	/**************************************************************/
	/************************* </GLOBALS> *************************/
	/**************************************************************/



	/**************************************************************/
	/*********************** <INITIALIZERS> ***********************/
	/**************************************************************/

	


	function populate_players(){
		var i = 0;
		<% @players.each do |player| %>
			var player_obj = {"id" : "<%=player.id%>", "name" : "<%= player.nickname %>"}
			all_players.push(player_obj);
			active_players.push(player_obj);
			i++;
		<% end %>
	}

	function create_player_objects(){
		var active_players_len = active_players.length
		for(var i =0; i < active_players_len; i++){
			var player_timer = new PlayerTimer(false, i);
			var player_obj = {"id" : active_players[i].id, "name" : active_players[i].name, "stat_index" : null, "is_in_game" : false, "timer": player_timer, "player" : true}
			active_players[i] = player_obj;
			var j = 0;
		}
	}

	function populate_stat_arrays(){
		var len = active_players.length
		for (var i = 0; i < len; i++){
			var player_obj = {"player_obj" : active_players[i], "cumulative_arr" : [], "gran_stat_arr" : []};
			<% @basic_stats.each do |stat| %>
				player_obj.cumulative_arr.push({"stat": "<%= stat.stat %>", "total" : 0, "id": "<%= stat.id %>", "display_priority" : "<%= stat.display_priority %>"})
			<% end %>
			stat_array.push(player_obj);
		}
		opponent_player_obj = {"id" : "<%= @opponent.id %>",  "name" : "<%= @opponent.name %>", "stat_index" : null, "timer": null, "player" : false}
		opponent_obj = {"player_obj" : opponent_player_obj,  "cumulative_arr" : [], "gran_stat_arr" : []};
		user_team_obj = {"cumulative_arr": []}
		
		<% @basic_stats.each do |stat| %>
			opponent_obj.cumulative_arr.push({"stat": "<%= stat.stat %>", "total" : 0, "id": "<%= stat.id %>", "display_priority" : "<%= stat.display_priority %>"})
			team_stat_totals.push({"stat": "<%= stat.stat %>", "total" : 0, "id": "<%= stat.id %>", "display_priority" : "<%= stat.display_priority %>"})
		<% end %>
		console.log(team_stat_totals)
	}

	function populate_display_stats(){
		var i = 0;
		<% @stat_table_columns.each do |stat| %>
			display_stats.push({"stat": "<%= stat[:stat_name] %>", "display_priority": "<%= stat[:display_priority] %>", "display_type" : "<%= stat[:display_type] %>", "percentage_string" : "<%= stat[:percentage_string]%>"})
			if("<%= stat[:display_type] %>" == "fraction"){
				i++;
			}
			i++;
			if("<%= stat[:stat_name] %>" == "Points") points_index = i;
		<% end %>
		minutes_index = i;
	}

	function start_game_mode(){
		//remove overlays
		$(".GM-modal").css("display", "none");
		$(".modal-overlay").css("display", "none");

		$("#in-game-players").html(populate_player_buttons(true));
		$("#bench-players").html(populate_player_buttons(false));

		opponent_button_html = "<button class = 'player-button' id = 'opponent-button' type = 'button' onclick = 'opponent_button( <%= @opponent.id %>, this)'> <%= @opponent.name %>  </button>"
		$("#opponent").html(opponent_button_html);
		on_game_page = true;
		populate_stat_arrays();
		populate_display_stats();
		populate_stat_table();	
		populate_player_shot_charts();
		

	}

	/**************************************************************/
	/*********************** </INITIALIZERS> ***********************/
	/**************************************************************/



	/**************************************************************/
	/*************** <STARTER AND INACTIVE SELECTION> *************/
	/**************************************************************/

	function populate_starter_selection(){
		var header_html = "<button id = 'GM-init-back' type = 'button' onclick = 'toggle_GM_body(" + 1 + ")'>Back </button> <div>Select Starters</div> ";
		$("#personel-selection-header").html(header_html);
		var len = active_players.length;
		var html_string = "";
		for(var i = 0; i < len; i++){
			html_string += "<button class = 'player-button' type = 'button' onclick = 'starter_button(" + active_players[i].id + " , this)' >" + active_players[i].name + "</button>";
		}
		$("#personel-selection-body").html(html_string);
		$("#GM-init-footer").html("");
	}


	function populate_inactive_selection(repopulate_active_players){
		
	 		$("#personel-selection-header").html("Select Inactives");
			var len = all_players.length;
			var html_string = "";
			for(var i = 0; i < len; i++){
				if (repopulate_active_players) players_not_in_game.push(all_players[i]);
				html_string += "<button class = 'player-button' type = 'button' onclick= 'inactive_button(" + all_players[i].id + ", this)' >" + all_players[i].name + "</button>"
			}
			$("#personel-selection-body").html(html_string);
			$("#GM-init-footer").html("<button class = 'next' type = 'button' onclick = 'toggle_GM_body(" + 2 + ")'> To Starter Selection </button>");
	}

	function set_all_players_to_bench(){
		active_players.map(function(item){item.is_in_game = false });
	}

	function set_not_in_game(player_id){
		active_players.map(function(item) { if(item.id == player_id) item.is_in_game = false });
	}

	function set_in_game(player_id){
		active_players.map(function(item) {if(item.id == player_id) item.is_in_game = true })
		players_in_game++;
	}

	function splice_active(player_id){
		removeIndex = active_players.map(function(item) { return item.id; }).indexOf(player_id);
        ~removeIndex && active_players.splice(removeIndex, 1);
	}


	function deselect_starter(button, player_id){
		deselect_button(button);
		set_not_in_game(player_id);
        var addBackPlayer = all_players.find(function(element) {
  				return element.id == player_id;
		});
	}

	function select_starter(button, player_id){
		select_button(button);
		var player_obj = active_players.find(function(element) {
  			return element.id == player_id;
		});
		set_in_game(player_id)	
	}

	function starter_button(player_id, button){
		player_id = player_id.toString()

		// not crazy about using background color to decide if button is selected
		if(button.style.backgroundColor != "black"){
			select_starter(button, player_id);
		}
		else if (button.style.backgroundColor == "black"){
			deselect_starter(button, player_id)
		}
		if(players_in_game >= 5){
			start_game_mode();
		}
	}

	function inactive_button(player_id, button){
		player_id = player_id.toString();
		if(button.style.backgroundColor != "black"){
			select_button(button);
			splice_active(player_id);
		}

		else if (button.style.backgroundColor == "black"){
			deselect_button(button);
            var addBackPlayer = all_players.find(function(element) {
  				return element.id == player_id;
			});
			active_players.push(addBackPlayer);
		}
	}

	function toggle_GM_body(select_type){
		switch(select_type){
			case 1 :
				active_players = all_players;
				populate_inactive_selection(true)
				break;
			case 2 :
				players_in_game = 0;
				set_all_players_to_bench()
				create_player_objects();
				populate_starter_selection();
				break;
		}
	}
	/**************************************************************/
	/*************** </STARTER AND INACTIVE SELECTION> ************/
	/**************************************************************/









	/**************************************************************/
	/************************* <TOOLBAR>***************************/
	/**************************************************************/


	function populate_player_buttons(is_in_game){
		html = "";
		var len = active_players.length
		for(var i = 0; i < len; i++){
			// set timer for players in game
			if(active_players[i].is_in_game == is_in_game){
				if(is_in_game) active_players[i].timer.toggleIsInGame();
				active_players[i].timer.setIndex(active_players[i].stat_index);
				html += "<button class = 'player-button' id = 'player-"+ active_players[i].id + "'" + " type = 'button' onclick = 'player_button(" +  active_players[i].id + ", this)'> " + active_players[i].name + " </button>"
			}
		}
		return html;
	}

	//potentially change (think offensive/defensive rebounds -> rebounds)
	function stat_button(stat_name, button){
		if(curr_player != null && (is_in_game(curr_player.player_obj) || curr_player_is_opponent )){
			if(miss_selected || make_selected){
				deselect_stat();
				make_selected = false;
				miss_selected = false;
			}
			curr_stat_button = button;
			if(stat_name == "Make"){
				select_button(button);
				make_selected = true;

			}
			else if (stat_name == "Miss"){
				select_button(button);
				miss_selected = true;
			} 
			else {
				add_stat(stat_name, curr_player.player_obj);
				deselect_player();
			}
		}
		else if (curr_player == null){
			deselect_button(curr_stat_button);
			select_button(button);
			curr_stat_button = button;
			curr_stat = stat_name;
		}
	}

	function deselect_stat(){
		curr_stat = null;
		deselect_button(curr_stat_button);
		curr_stat_button = null;
	}


	function is_in_game(player){
		if (curr_player_is_opponent) return true; 
		else {
			var len = active_players.length
			for(var i = 0; i < len; i++){
				if (player.id == active_players[i].id){
					return player.is_in_game;
				}
			}
		}
	}

	function player_html(player){
		return "<button class = 'player-button' id = 'player-"+ player.id + "'" + " type = 'button' onclick = 'player_button(" +  player.id + ", this)'> " + player.name + " </button>"
	}

	function swap_players(player_to_game, player_to_bench){
		// splice both in the arrays
		set_not_in_game(player_to_bench.player_obj.id);
		set_in_game(player_to_game.player_obj.id);

		// push to new arrays respectively
		player_to_game.player_obj.timer.toggleIsInGame();
		player_to_bench.player_obj.timer.toggleIsInGame();

		// change HTML
		var player_to_game_identifier = "#player-" + player_to_game.player_obj.id
		var player_to_bench_identifier = "#player-" + player_to_bench.player_obj.id
		$(player_to_game_identifier).remove();
		$(player_to_bench_identifier).remove();
		$("#bench-players").append(player_html(player_to_bench.player_obj));
		$("#in-game-players").append(player_html(player_to_game.player_obj));
		curr_player = null;
	}

	function select_player(new_curr_player, button){
		curr_player = new_curr_player;
		button.style.backgroundColor = "black";
		button.style.color = "white";
		curr_player_button = button;
		curr_player_is_opponent = false;
	}

	function select_opponent(button){
		curr_player = opponent_obj;
		button.style.backgroundColor = "black";
		button.style.color = "white";
		curr_player_is_opponent = true;
		curr_player_button = button;
	}

	function deselect_player(){
		curr_player = null;
		deselect_button(curr_player_button);
		curr_player_button = null;
	}

	function opponent_button(id, button){

		if (curr_stat != null){
			curr_player_button = button;
			curr_player = opponent_obj;
			add_stat_to_player();
		}
		else{
			deselect_button(curr_player_button)
			select_opponent(button)
		}
	}

	function add_stat_to_player(){
		if(curr_stat == "Make"){
				select_button(curr_player_button);
				make_selected = true;
			}
			else if (curr_stat == "Miss"){
				select_button(curr_player_button);
				miss_selected = true;
			}
			else{
				add_stat(curr_stat, curr_player.player_obj);
				deselect_player();
				deselect_stat();
			}
	}


	function player_button(id, button){
		new_curr_player = stat_array.find(function(element) {
  				return element.player_obj.id == id;
		});

		if (curr_stat != null && is_in_game(new_curr_player.player_obj)){
			curr_player_button = button;
			curr_player = new_curr_player;
			add_stat_to_player();
		}

		else if(curr_player && !curr_player_is_opponent && is_in_game(curr_player.player_obj)  ){
			if(!is_in_game(new_curr_player.player_obj)) 
				swap_players(new_curr_player, curr_player) 
			else {
				deselect_player();
				select_player(new_curr_player, button);
			} 
		}

		else if (curr_player && !curr_player_is_opponent) {
			if (is_in_game(new_curr_player.player_obj)) 
				swap_players(curr_player, new_curr_player) 
			else {
				deselect_player();
				select_player(new_curr_player, button);
			}
		}
		else {
			deselect_player();
			select_player(new_curr_player, button);
		}
	}

	function deselect_button(button){
		if(button != null){
			button.style.backgroundColor = "white";
			button.style.color = "black";
		}
	}

	function select_button(button){
		if(button != null){
			button.style.backgroundColor = "black";
			button.style.color = "white";
		}
	}
	/**************************************************************/
	/************************* </TOOLBAR>**************************/
	/**************************************************************/









	/**************************************************************/
	/************************* <SHOT CHART>************************/
	/**************************************************************/

	$(".show-canvas").on("click", function(e) {
		if(make_selected && curr_player != null){
			make(e);
		}
		else if (miss_selected && curr_player != null){
			miss(e);
		}
	}); 


	// TODO: SHOULD BE GOOD!!!
	function determine_3_or_2(x_loc, y_loc){

		var rel_pos_x = basket_x - x_loc;
		var rel_pos_y = basket_y - y_loc;
		if(rel_pos_y < 0){
			if (Math.abs(rel_pos_x) > arc_horiz_radius){
				return 3;
			}
			else{
				return 2;
			}
		}
		else {
			var x_val = (rel_pos_x * rel_pos_x);
			var x_denom = arc_horiz_radius * arc_horiz_radius;
			var x_ratio = x_val/x_denom

			var y_denom = arc_vert_radius * arc_vert_radius;
			var y_val = rel_pos_y * rel_pos_y;
			y_ratio = y_val/y_denom

			var ellipse_val = x_ratio + y_ratio

			if (ellipse_val > 1) return 3;
			else return 2;
		}
	}


	function make(e){
		var x_loc = e.pageX - make_radius - horiz_offset;
		var y_loc = e.pageY - make_radius - vert_offset;
		var point_val = determine_3_or_2(x_loc, y_loc);
		var fg_counter = stat_array_counter;

		plot_make(y_loc, x_loc, make_radius, curr_player.player_obj.id, curr_player.player_obj.player, point_val, fg_counter + 1, curr_player.player_obj.stat_index, gm_canvas_width, canvas);
		add_stat("Make", curr_player.player_obj, {"x_loc" : x_loc/gm_canvas_width, "y_loc": y_loc/gm_canvas_width, "shot_value" : point_val}, fg_counter + 1);

		if(point_val == 3)  add_stat("3 point make",  curr_player.player_obj, {"x_loc" : x_loc/gm_canvas_width, "y_loc": y_loc/gm_canvas_width}, fg_counter + 1);

		update_score(point_val, curr_player_is_opponent);
		(curr_player_is_opponent) ? to_opponent_shot_chart() : to_team_shot_chart();
		deselect_player();
		deselect_stat();
		make_selected = false;	
	}

	// change to use function update_field_goals instead of add_stat
	function miss(e){
		x_loc = e.pageX - horiz_offset;
		y_loc = e.pageY - vert_offset;
		var fg_counter = stat_array_counter;
		var point_val = determine_3_or_2(x_loc, y_loc);
		plot_miss([x_loc, y_loc, x_loc , y_loc ], curr_player.player_obj.id, curr_player.player_obj.player, point_val, fg_counter + 1, curr_player.player_obj.stat_index, gm_canvas_width, canvas) ;
		add_stat("Miss", curr_player.player_obj, {"x_loc" : x_loc/gm_canvas_width, "y_loc": y_loc/gm_canvas_width, "shot_value" : point_val}, fg_counter + 1);

		if(point_val == 3) add_stat("3 point miss",  curr_player.player_obj, {"x_loc" : x_loc/gm_canvas_width, "y_loc": y_loc/gm_canvas_width}, fg_counter + 1);

		(curr_player_is_opponent) ? to_opponent_shot_chart() : to_team_shot_chart();
		deselect_player();
		deselect_stat();
		miss_selected = false;
	}

	function move_make(obj, point){
    	obj.set({left: point.x - make_radius, top: point.y - make_radius})
    	if(obj.point_value != determine_3_or_2(point.x, point.y)){
    		update_shot_data(obj, obj.point_value, "Make");
    		obj.point_value = determine_3_or_2(point.x, point.y);
    	}
    }

    function move_miss(obj, point){
    	obj.set({x1: point.x, x2: point.x, y1: point.y, y2: point.y})
    	obj.setCoords();
    	if(obj.point_value != determine_3_or_2(point.x, point.y)){
    		update_shot_data(obj, obj.point_value, "Miss");
    		obj.point_value = determine_3_or_2(point.x, point.y);
    	}
    }



    /*****************************************************************/
    /*****************************************************************/
    /*****************************************************************/
    /*****************************************************************/
    /*****************************************************************/
    /*****************************************************************/
    /*****************************************************************/

    function find_stat_granule(player, counter){
    	granule_return_array = []
    	var granule_array_len = player.gran_stat_arr.length
    	for(var i = 0; i < granule_array_len; i++){
    		var granule = player.gran_stat_arr[i];
    		if(granule.index == counter){
    			granule_return_array.push(granule);
    		}
    	}
    	return granule_return_array;
    }

    function update_make_data(obj, player, result, result_w_point, point_value){
    	if(point_value == 3){
    		var new_stat_string = "2 point make";
    		var old_stat_string = "3 point make";
    		result.metadata.shot_value = "2";
    		result_w_point.stat_list_id = "9";
    		update_score(-1, !obj.player);
    		increment_points(player.player_obj.stat_index -1, -1, stat_array[player.player_obj.stat_index -1])
    	}
    	else if (point_value == 2){
    		var old_stat_string = "2 point make";
    		var new_stat_string = "3 point make";
    		result.metadata.shot_value = "3";
    		result_w_point.stat_list_id = "11";
    		update_score(1, !obj.player);
    		increment_points(player.player_obj.stat_index -1, 1, stat_array[player.player_obj.stat_index -1])
    	}
    	return [new_stat_string, old_stat_string];
    }

    function update_miss_data(obj, player, result, result_w_point, point_value){
    	if(point_value == 3){
    		var new_stat_string = "2 point miss";
    		var old_stat_string = "3 point miss";
    		result.metadata.shot_value = "2";
    		result_w_point.stat_list_id = "10";
    	}
    	else if (point_value == 2){
    		var old_stat_string = "2 point make";
    		var new_stat_string = "3 point make";
    		result.metadata.shot_value = "3";
    		result_w_point.stat_list_id = "12";
    	}
    	return [new_stat_string, old_stat_string];
    }

    function update_shot_data(obj, point_value, shot_result){

    	var player = find_player(obj);
    	var granule_array = find_stat_granule(player, obj.index);
    	var result = granule_array[0];
    	var result_w_point = granule_array[1];

    	var string_array = (shot_result == "Make") ? update_make_data(obj, player, result, result_w_point, point_value) : update_miss_data(obj, player, result, result_w_point, point_value)

    	var new_stat_string = string_array[0];
    	var old_stat_string = string_array[1];


    	var player_row = (obj.player) ? player_stats_table.rows[player.player_obj.stat_index] : team_stats_table.rows[2];
    	var team_row = team_stats_table.rows[1];
    	
    	var old_player_stat_index = find_stat_in_player_arr(old_stat_string);
    	
    	var old_index = find_stat_index(stat_array[0].cumulative_arr[old_player_stat_index]) + 1;

    	var new_player_stat_index = find_stat_in_player_arr(new_stat_string);
    	var new_index = find_stat_index(stat_array[0].cumulative_arr[new_player_stat_index]) + 1;
    	
    	undo_table_cell(old_index, shot_result, player_row);
    	fg_in_table(new_index, shot_result, player_row);
    	
    	if(obj.player){
    		undo_table_cell(old_index, shot_result, team_row);
    		fg_in_table(new_index, shot_result, team_row);
    		player.cumulative_arr[old_player_stat_index].total--;
    		player.cumulative_arr[new_player_stat_index].total++;

    	}
    	else {
    		opponent_obj.cumulative_arr[old_player_stat_index].total--;
    		opponent_obj.cumulative_arr[new_player_stat_index].total++;
    	}
    }


	function shot_chart_button(id, button){
		canvas.getObjects().forEach(function(o){
			if(o.type != "Basket"){	
				o.set({opacity: 1,
				selectable: true,
				evented: true,})
			}
		});	

		canvas.getObjects().forEach(function(o){
			if(o.type != "Basket"){
				if(o.id != id || o.player == false){
					o.set({opacity: 0,
						selectable: false,
						evented: false,

					})
				}
			}
		});	
		canvas.renderAll();
	}

	function populate_player_shot_charts(){
		var len = active_players.length;
		var html_string = "";
		for(var i = 0; i < len; i++){
			html_string += "<button class = 'shot-chart-button' type = 'button' onclick='shot_chart_button(" + active_players[i].id +", this)'> " + active_players[i].name + " </button>"
		}
		$("#player-shot-chart-buttons").html(html_string)
		$("#player-shot-chart-buttons").css("grid-template-rows", "repeat( "+ len/3 + ", 81px)"); ;
	}

	function to_team_shot_chart(){
		canvas.getObjects().forEach(function(o){
			if(o.type != "Basket"){	
				o.set({opacity: 1,
					selectable: true,
					evented: true,})
			}
		});
		canvas.getObjects().forEach(function(o){
			if(o.type != "Basket"){	
				if(o.player == false ){
					o.set({opacity: 0,
					selectable: false,
					evented: false,})
				}
			}
		});	
		canvas.renderAll();
		
	}

	function to_opponent_shot_chart(){
		canvas.getObjects().forEach(function(o){
			if(o.type != "Basket"){	
				o.set({opacity: 1,
					selectable: true,
					evented: true})
			}
		});
		canvas.getObjects().forEach(function(o){
			if(o.type != "Basket"){	
				if(o.player == false ){
					o.set({opacity: 1,
						selectable: true,
					evented: true,})
				}
				else{
					o.set({opacity: 0,
					selectable: false,
					evented: false,})
				}
			}
		});	
		canvas.renderAll();
		
	}
	/**************************************************************/
	/************************* </SHOT CHART>***********************/
	/**************************************************************/








	/**************************************************************/
	/************************ <STAT TABLE> ************************/
	/**************************************************************/

	function populate_stat_table(){
		// Insert fields for opponent
		var stats_row = team_stats_table.insertRow(0);
		var team_row = team_stats_table.insertRow(1);
		var opponent_row = team_stats_table.insertRow(2);

		populate_row(stats_row, 0, false);
		populate_row(team_row, 1, false, "<%= @team.name %>");
		populate_row(opponent_row, 2, false, opponent_obj.player_obj.name);
		var cumulative_array_len = stat_array.length
		var i = 0;
		for(i; i < cumulative_array_len + 1; i++){
			var row = player_stats_table.insertRow(i);
			populate_row(row, i, true);	
		}
		
	}

	function populate_row(row, i, is_player, team_name){
		var insert_index = 0;
		var num_stats = display_stats.length;
		for(j = 0 ;j < num_stats + 1; j++){
			var col = row.insertCell(insert_index);
			if (j == 0 && i > 0){
				var column_header;
				if(is_player){
					column_header = stat_array[i-1].player_obj.name;
					stat_array[i-1].player_obj.stat_index = i; 
				}else{
					column_header = team_name;
				}
				col.innerHTML += "<div>" + column_header + "</div>";
			}
			else if(i == 0 && j > 0){
				col.innerHTML += "<div>" + display_stats[j - 1].stat + "</div>";
				if(display_stats[j - 1].display_type == "fraction"){
					insert_index++;
					var pct_col = row.insertCell(insert_index);
					pct_col.innerHTML = "<div>" + display_stats[j - 1].percentage_string + "</div>"; 
				}
			}
			else if (i > 0 && j > 0){
				if(display_stats[j - 1].display_type == "fraction"){
					col.innerHTML = 0+ "/" + 0;
					insert_index++;
					var pct_col = row.insertCell(insert_index);
					pct_col.innerHTML = "0%";
				}
				else if (display_stats[j - 1].display_type == "minutes"){
					col.innerHTML = "0:00";
				}
				else{
					col.innerHTML += 0;
				}
			}
			insert_index++;
		}
	}

	function update_minutes_played(player_i, new_val){
		var row = player_stats_table.rows[player_i+1]
		var col = row.cells[minutes_index]
		var seconds_str;
		var player_minutes = Math.floor(new_val / 60)
		var player_seconds = new_val - player_minutes * 60;
		(player_seconds < 10) ? seconds_str = "0" + player_seconds.toString() : seconds_str = player_seconds.toString();
		col.innerHTML = player_minutes.toString() + ":" + seconds_str
	}

	function update_stat_table(stat_i, player_i, new_val){
		if(player_i >= 0){
			var player_row = player_stats_table.rows[player_i+1];
			var player_col = player_row.cells[stat_i + 1];
			var team_row = team_stats_table.rows[1];
			var team_col = team_row.cells[stat_i + 1]
			console.log(team_col.innerHTML)

			player_col.innerHTML = new_val;
			team_col.innerHTML = parseInt(team_col.innerHTML) + 1;
		}
		else {
			var row = team_stats_table.rows[2];
			var col = row.cells[stat_i+1];
			col.innerHTML = new_val;
		}
	}	

	function find_stat_index(stat){
		var display_stats_len = display_stats.length;
		var actual_index = 0;
		for (var i = 0; i < display_stats_len; i++){
			if (stat.display_priority == display_stats[i].display_priority){
				return actual_index;
			}
			if(display_stats[i].display_type == "fraction"){
				actual_index++;
			}
			actual_index++;
		}
	}

	function find_stat_in_player_arr(stat){
		var stat_found = false;
		var stat_i = 0;
		while(!stat_found){
			if(stat == stat_array[0].cumulative_arr[stat_i].stat){
				stat_found = true;
				return stat_i;
			}
			stat_i++;
		}
	}

	function add_stat_to_obj(stat, obj, metadata, player_i, index){
		var stat_i = find_stat_in_player_arr(stat)
		obj.gran_stat_arr.push({"metadata" : metadata, "stat_list_id" : obj.cumulative_arr[stat_i].id, "index" : index});
		switch(stat){
			case "Make" :
				update_field_goals_make(player_i, stat_i, fg_index);
				++obj.cumulative_arr[stat_i].total;
				if (!curr_player_is_opponent) ++team_stat_totals[stat_i].total;
				break;
			case "Miss" :
				update_field_goals_miss(player_i, stat_i, fg_index);
				++obj.cumulative_arr[stat_i].total;
				if (!curr_player_is_opponent) ++team_stat_totals[stat_i].total;
				break;
			case "2 point make" :
				update_field_goals_make(player_i, stat_i, two_pt_fg_index);
				increment_points(player_i, 2, obj);
				++obj.cumulative_arr[stat_i].total;
				if (!curr_player_is_opponent) ++team_stat_totals[stat_i].total;
				break;
			case "2 point miss" :
				update_field_goals_miss(player_i, stat_i, two_pt_fg_index);
				++obj.cumulative_arr[stat_i].total;
				if (!curr_player_is_opponent) ++team_stat_totals[stat_i].total;
				break;
			case "3 point make" :
				update_field_goals_make(player_i, stat_i, three_pt_fg_index);
				increment_points(player_i, 3, obj);
				++obj.cumulative_arr[stat_i].total;
				if (!curr_player_is_opponent) ++team_stat_totals[stat_i].total;
				break;
			case "3 point miss" :
				update_field_goals_miss(player_i, stat_i, three_pt_fg_index);
				++obj.cumulative_arr[stat_i].total;
				if (!curr_player_is_opponent) ++team_stat_totals[stat_i].total;
				break;
			case "Free throw make" :
				insert_fg_in_table(player_i, ft_index, "Make", obj);
				increment_points(player_i, 1, obj);
				update_score(1, curr_player_is_opponent);
				++obj.cumulative_arr[stat_i].total;
				if (!curr_player_is_opponent) ++team_stat_totals[stat_i].total
				break;
			case "Free throw miss" :
				insert_fg_in_table(player_i, ft_index, "Miss", obj);
				++obj.cumulative_arr[stat_i].total;
				if (!curr_player_is_opponent) ++team_stat_totals[stat_i].total
				break;
			default :
				var index = find_stat_index(obj.cumulative_arr[stat_i]);
				update_stat_table(index, player_i, ++obj.cumulative_arr[stat_i].total);
				if (!curr_player_is_opponent) team_stat_totals[stat_i].total++;
		}
	}

	function add_stat(stat, player, metadata, index){
		var player_found = false;
		var player_i = 0;
		var stat_object;
		
		if(curr_player_is_opponent){
			stat_object = {"player": player, "stat": stat, "metadata" : metadata, "is_opponent": true, "index": index};
			add_stat_to_obj(stat, opponent_obj, metadata, -1, index);
		}
		else if (is_in_game(player)){
			while(!player_found){
				var curr_player_obj = stat_array[player_i];
				if(curr_player_obj.player_obj.id == player.id){
					stat_object = {"player": player, "stat": stat, "metadata" : metadata, "is_opponent": false, "index": index};
					add_stat_to_obj(stat, curr_player_obj, metadata, player_i, index);
					player_found = true;
				}
				player_i++;
			}
		}
		all_stat_granules.push(stat_object);
		stat_array_counter++;
	}


	function fg_in_table(index, shot_result, row){
		var col = row.cells[index];
		var pct_col = row.cells[index+1];
		contents = col.innerHTML;
		split_contents = contents.split('/');
		numerator = parseInt(split_contents[0]);
		denomenator = parseInt(split_contents[1]);
		denomenator++;
		if(shot_result == "Make") numerator++;
		col.innerHTML = numerator + "/" + denomenator;

		pct_col.innerHTML = Math.round(numerator / denomenator * 100) + "%"
	}

	function insert_fg_in_table(player_i, index, shot_result){
		// if player is a player (not the opponent)
		if(player_i >= 0 ){
			player_row = player_stats_table.rows[player_i+1];
			team_row = team_stats_table.rows[1];
			fg_in_table(index, shot_result, player_row);
			fg_in_table(index, shot_result, team_row);
		}
		// if player is the oppoenent (team)
		else {
			opponent_row = team_stats_table.rows[2];
			fg_in_table(index, shot_result, opponent_row);
		}

	}

	function points_in_table (row, shot_value){
		var col = row.cells[points_index];
		var curr_points = parseInt(col.innerHTML)
		curr_points += shot_value
		col.innerHTML = curr_points.toString();
	}

	function increment_points(player_i, shot_value, player_obj){
		var stat_i = find_stat_in_player_arr("Points")
		// if player is a player (not the opponent)
		if(player_i >= 0 ){
			var player_row = player_stats_table.rows[player_i+1];
			var team_row = team_stats_table.rows[1];
			points_in_table(player_row, shot_value);
			points_in_table(team_row, shot_value);
			
			team_stat_totals[stat_i].total += shot_value;
			player_obj.cumulative_arr[stat_i].total += shot_value;
		}
		// if player is the opponent (team)
		else {
			var opponent_row = team_stats_table.rows[2];
			points_in_table(opponent_row, shot_value);
			opponent_obj.cumulative_arr[stat_i].total += shot_value;
		}
		
	}

	function update_field_goals_make(player_i, stat_i, index){
		insert_fg_in_table(player_i, index, "Make");
	}

	function update_field_goals_miss(player_i, stat_i, index){
		insert_fg_in_table(player_i, index, "Miss");
	}

	function undo_table_cell(index, shot_result, row){
		var col = row.cells[index];

		var pct_col = row.cells[index+1];
		contents = col.innerHTML;
		split_contents = contents.split('/');
		numerator = parseInt(split_contents[0]);
		denomenator = parseInt(split_contents[1]);
		denomenator--;
		if(shot_result == "Make") numerator--;
		col.innerHTML = numerator + "/" + denomenator;
		if(denomenator == 0){
			pct_col.innerHTML = 0
		}
		else{
			pct_col.innerHTML = Math.round(numerator / denomenator * 100) + "%"
		}
	}

	function undo_ft(stat_object, result, stat_string, stat_index){
	    var player_row = player_stats_table.rows[stat_object.player.stat_index];
	    var team_row = team_stats_table.rows[1];
	    var opponent_row = team_stats_table.rows[2];

		var player_stat_index = find_stat_in_player_arr(stat_string)
	    
	    if(!stat_object.is_opponent){
		    undo_table_cell(stat_index, result, player_row);
		    undo_table_cell(stat_index, result, team_row);
		    stat_array[stat_object.player.stat_index -1].cumulative_arr[player_stat_index].total--;
	    }
	    else{
	    	undo_table_cell(stat_index, result, opponent_row);
	    	opponent_obj.cumulative_arr[player_result_index].total--;
	    } 
	}

	function undo_fg(stat_object, result, stat_string, stat_index, result_index){
		//find shot chart object
		canvas.getObjects().forEach(function(o){
			if (o.index == stat_object.index){
				canvas.remove(o);
			}
		});

		// eliminate double counting for field goals
		all_stat_granules.pop()

	    var player_row = player_stats_table.rows[stat_object.player.stat_index];
	    var team_row = team_stats_table.rows[1];
	    var opponent_row = team_stats_table.rows[2];

		var player_stat_index = find_stat_in_player_arr(stat_string)
	    var player_result_index = find_stat_in_player_arr(result)
	    
	    if(!stat_object.is_opponent){
		    undo_table_cell(stat_index, result, player_row);
		    undo_table_cell(result_index, result, player_row);
		    undo_table_cell(stat_index, result, team_row);
		    undo_table_cell(result_index, result, team_row);
		    stat_array[stat_object.player.stat_index -1].cumulative_arr[player_stat_index].total--;
	    	stat_array[stat_object.player.stat_index -1].cumulative_arr[player_result_index].total--;
	    	stat_array[stat_object.player.stat_index -1].gran_stat_arr.pop();
	    }
	    else{
	    	undo_table_cell(stat_index, result, opponent_row);
	    	undo_table_cell(result_index, result, opponent_row);
	    	opponent_obj.cumulative_arr[player_result_index].total--;
	    	opponent_obj.gran_stat_arr.pop();
	    }  
	}

	function undo_stat_in_table(stat_object, stat_i, new_val ){
		var player_row = player_stats_table.rows[stat_object.player.stat_index];
		var player_col = player_row.cells[stat_i + 1];
		var team_row = team_stats_table.rows[1];
		var team_col = team_row.cells[stat_i + 1]

		player_col.innerHTML = new_val;
		team_col.innerHTML = new_val;
	}

	function undo_player_array_stat(stat_object){
		var stat_string = stat_object.stat;
	    	switch(stat_string){
	    		case "3 point make":
	    			undo_fg(stat_object, "Make", stat_string, three_pt_fg_index, fg_index);
	    			increment_points(stat_object.player.stat_index -1, -3, stat_array[stat_object.player.stat_index -1])
	    			update_score(-3, stat_object.is_opponent);
	    			break;
	    		case "2 point make":
	    			undo_fg(stat_object, "Make", stat_string, two_pt_fg_index, fg_index);
	    			increment_points(stat_object.player.stat_index -1, -2, stat_array[stat_object.player.stat_index -1])
	    			update_score(-2, stat_object.is_opponent);
	    			break;
	    		case "3 point miss" :
	    			undo_fg(stat_object, "Miss", stat_string, three_pt_fg_index, fg_index);
	    			break;
	    		case "2 point miss" :
	    			undo_fg(stat_object, "Miss", stat_string, two_pt_fg_index, fg_index);
	    			break;
	    		case "Free throw make" :
	    			undo_ft(stat_object, "Make", stat_string, ft_index);
	    			increment_points(stat_object.player.stat_index -1, -1, stat_array[stat_object.player.stat_index -1])
	    			update_score(-1, stat_object.is_opponent);
	    			break;
	    		case "Free throw miss":
	    			undo_ft(stat_object, "Miss", stat_string, ft_index);
	    			break;
	    		default : 
	    			var player_stat_index = find_stat_in_player_arr(stat_string);
	    			if(stat_object.is_opponent){
	    				var stat_index = find_stat_index(opponent_obj.cumulative_arr[player_stat_index]);
	    				undo_stat_in_table(stat_object, stat_index, --opponent_obj.cumulative_arr[player_stat_index].total);
	    			}
	    			else {
	    				var stat_index = find_stat_index(stat_array[stat_object.player.stat_index -1].cumulative_arr[player_stat_index]);
	    				undo_stat_in_table(stat_object, stat_index, --stat_array[stat_object.player.stat_index -1].cumulative_arr[player_stat_index].total);
	    			}
	    			
	    			break; 
	    	}
	    	(stat_object.is_opponent) ? opponent_obj.gran_stat_arr.pop() : stat_array[stat_object.player.stat_index -1].gran_stat_arr.pop();
	}

	

	/**************************************************************/
	/********************** </STAT TABLE> *************************/
	/**************************************************************/










	/**************************************************************/
	/************************ <SCOREBOARD> ************************/
	/**************************************************************/	

	function update_score(value, is_opponent){
		if(is_opponent){
			opponent_score += value;
			$("#opponent-score").text(function() {
	  				return (opponent_score);
			});
		}
		else{
			home_score += value;
			$("#home-score").text(function( index ) {
	  				return ( home_score);
			});
		}
	}

	var scoreboard_clock = new ScoreboardClock();
	scoreboard_clock.set_timer();

	document.onkeydown = function(e){
	    e = e || window.event;
	    var key = e.which || e.keyCode;
	    if(key===32){
	    	e.preventDefault();
	        scoreboard_clock.toggle_timer();
	    }
	    if(key===13){
	    	e.preventDefault();
	        submit_game_mode();
	    }
	    if(key == 90 && e.ctrlKey){
	    	stat_object = all_stat_granules.pop();
	    	undo_player_array_stat(stat_object);
	    }
	}
	


	function ScoreboardClock(){
		var self = this;
		this.isRunning = false;
		this.toggle_timer = function(){
			self.isRunning = !self.isRunning;
			var len = active_players.length
			for(var i = 0; i < len; i++){
				active_players[i].timer.toggleClockMoving()
			}
		}
		this.stop_timer = function(){
			self.isRunning = false;
			var len = active_players.length
			for(var i = 0; i < len; i++){
				active_players[i].timer.stopClockMoving()
			}
		}
		this.set_timer = function(){
			$("#timer").text(function(){
				var seconds_str;
				(seconds < 10) ? seconds_str = "0" + seconds.toString() : seconds_str = seconds.toString();
				return minutes.toString() + ":" + seconds_str
			});
		}
		this.set_period = function(){
			$("#period").text(function(){
				return curr_period.toString() + "Q"
			});
		}
		this.interval = setInterval(function() {

		    if (self.isRunning == true) {
		        seconds--;
		        total_minutes++;
		        if(seconds <0){
		        	minutes--;
		        	if(minutes < 0){
		        		curr_period++;
		        		if(curr_period > periods){
		        			//PROMPT TO SUBMIT
		        		}
		        		else {
		        			self.set_period();
		        			minutes = minutes_per_period;
		        			self.toggle_timer();
		        			seconds = 0;
		        		}
		        	}
		        	else seconds = 59;
		        }
		        //console.log(seconds)
		        self.set_timer()
		    }
		    else{
		    	
		    }
		}, 1000);
	}
	

	function PlayerTimer(is_in_game, player_index) {
		  var self = this;
		  this.time_played = 0;
		  this.is_in_game = is_in_game;
		  this.clock_moving = false;
		  this.stat_index;
		  this.player_index = player_index

		  this.updatePlayingTime = function() {
		      if(self.is_in_game && self.clock_moving){
		      	self.time_played++;
		      	update_minutes_played(self.player_index, self.time_played);
		      }
		  }
		  this.returnPlayingTime = function(){
		  	return self.time_played;
		  }
		  this.toggleClockMoving = function(){
		  	self.clock_moving = !self.clock_moving;
		  }
		  this.toggleIsInGame = function(){
		  	self.is_in_game = !self.is_in_game;
		  }
		  this.setIndex = function(stat_index){
		  	self.stat_index = stat_index;
		  }
		  this.stopClockMoving = function(){
		  	self.clock_moving = false;
		  }
		  this.interval = setInterval(this.updatePlayingTime, 1000);
	}





	/**************************************************************/
	/************************** </TIMER> **************************/
	/**************************************************************/

	




	/**************************************************************/
	/************************* <SUBMIT>****************************/
	/**************************************************************/

	function set_minutes_in_player_array(){
		var arr_minutes_index;
		var stat_array_len = stat_array[0].cumulative_arr.length;
		for(var i = 0; i < stat_array_len; i++){
			if(stat_array[0].cumulative_arr[i].stat == "Minutes") arr_minutes_index = i;
		}

		num_players = stat_array.length;

		for (var j = 0; j < num_players; j++){
			var row = player_stats_table.rows[j+1]
			var col = row.cells[minutes_index];
			var contents = col.innerHTML;
			var split_contents = contents.split(':');
			var minutes = parseInt(split_contents[0])*60
			var seconds = parseInt(split_contents[1])
			minutes = minutes + seconds;
			stat_array[j].cumulative_arr[arr_minutes_index].total = minutes;
		}
	}

	function set_team_minutes(){
		var team_stat_arr_len = team_stat_totals.length
		var minutes_index;
		for(var i = 0; i < team_stat_arr_len; i++){
			if(team_stat_totals[i].stat == "Minutes") {
				console.log("FOUND MINUTES!")
				minutes_index = i;
			}
		}
		team_stat_totals[minutes_index].total = total_minutes * 5;
		console.log(team_stat_totals)
	}

	function update_fg_locations(){
		canvas.getObjects().forEach(function(o){
			if (o.type != "Basket"){
				player = (o.player) ? stat_array[o.player_index-1] : opponent_obj;
				granule_array_len = player.gran_stat_arr.length
				for(var i = 0; i < granule_array_len; i++){
					if(player.gran_stat_arr[i].index == o.index){						
						player.gran_stat_arr[i].metadata.x_loc = o.left;
						player.gran_stat_arr[i].metadata.y_loc = o.top;
					}
				}
			}
		});
	}

	function submit_game_mode(){
		scoreboard_clock.stop_timer();

		//update_fg_locations();

		var url = "/teams/" + <%= @team_id%> +  "/games/"+ <%=@game_id%> + "/game_mode"
		set_minutes_in_player_array();
		set_team_minutes();
		var json_data = {"player_stats": stat_array, "team_stats": team_stat_totals, "opponent_stats": opponent_obj}
		
		 $.ajax({
			url: url,
			beforeSend: function(xhr) {xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'))},
			type: "post",
			data_type: 'json',
			data: json_data,
		});
	}

	/**************************************************************/
	/************************* </SUBMIT>***************************/
	/**************************************************************/




</script>