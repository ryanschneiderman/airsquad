<script>
	var team_stats_table;
	var adv_stats_team_table; 
	var display_stats = [];
	var display_stats_adv = []
	var display_stats_team_adv = []
	var player_stats = [];
	var team_stat_array = [];
	var team_advanced_stat_array = [];
	var opponent_stat_array = [];
	var make_radius = 5;

	var minutes_p_q = "<%=@minutes_p_q%>"
	var per_minute_factor = parseInt(minutes_p_q) * 3;


	function initialize_tables(team, adv_team){
		team_stats_table = team;
		adv_stats_team_table = adv_team;
	}

	function sort_player_arr(display_priority){
		var sort_index = find_player_stat_index(display_priority, player_stats[0].stat_arr)
		player_stats.sort(function(a, b){
				var diff = parseInt(b.stat_arr[sort_index].value) -  parseInt(a.stat_arr[sort_index].value)
				if (diff == 0){
					var id_diff = b.id - a.id 
					return id_diff;
				}
				else return diff;
		});
	}


	function insert_player_modules(){
		//iterate over sorted player array
		var len = player_stats.length
		for (var i = 0; i < len; i++){
			var player_module = $("#player-module-" + i)
			
			var basic_table = player_module.children(".player-basic-stats")[0]

			basic_table.appendChild(document.createElement('tbody'))
			var row = basic_table.insertRow(0);
			insert_basic_data(row, player_stats[i], false);
			insert_basic_player_stat_header(basic_table)

			var advanced_table = player_module.children(".player-advanced-stats")[0];
			advanced_table.appendChild(document.createElement('tbody'))
			var row = advanced_table.insertRow(0);
			insert_adv_data(row, player_stats[i]);
			insert_adv_stat_header(advanced_table)

			var per_minute_table = player_module.children(".player-per-minute-stats")[0];
			per_minute_table.appendChild(document.createElement('tbody'))
			var row = per_minute_table.insertRow(0)
			insert_basic_data(row, player_stats[i], true)
			insert_basic_player_stat_header(per_minute_table)

			create_player_shot_chart(player_stats[i], i)
			var shot_chart = player_module.children(".canvas-container")
			shot_chart.hide();
		}
	}

	function populate_team_stat_tables(opponent){
		insert_basic_team_stat_header(team_stats_table);
		insert_team_adv_stat_header(adv_stats_team_table);
		
		var team_row = team_stats_table.insertRow(1);
		if(opponent)var opponent_row = team_stats_table.insertRow(2);
		insert_basic_row(team_row, 1, false, team_stat_array);
		if(opponent) insert_basic_row(opponent_row, 2, false, opponent_stat_array);
		var team_advanced_row = adv_stats_team_table.insertRow(2)
		insert_team_advanced_row(team_advanced_row, 2)
	}


	function create_player_shot_chart(player, module_id){
		var canvas_vars = initialize_canvas(.2, .7, 'player-canvas-' + module_id, 2);

	    plotBasket(canvas_vars.canvas_width/1.978, canvas_vars.canvas_height/11.5, 7, canvas_vars.canvas_width, canvas_vars.canvas);
    	populate_player_shot_chart(player, canvas_vars.canvas, canvas_vars.canvas_width);

    	$(window).resize(function(){
	        canvas_vars.canvas.getObjects().forEach(function(o){
	        	switch(o.type){
	        		case "MakeSymbol" :
		        		var old_canvas_width = o.canvas_width;
		        		var change_ratio = old_canvas_width/canvas_vars.canvas.width;

		        		o.set({left: o.left/ change_ratio, top: o.top / change_ratio, canvas_width: canvas_vars.canvas.width});
		        		o.setCoords();
		        		canvas_vars.canvas.calcOffset();
		  				canvas_vars.canvas.renderAll();
	        		break;
	        		case "Basket" :
	        			var old_canvas_width = o.canvas_width;
		        		var change_ratio = old_canvas_width/canvas_vars.canvas.width;
		        		var basket_radius = o.radius /change_ratio

		        		o.set({left: o.left/ change_ratio, top: o.top / change_ratio, canvas_width: canvas_vars.canvas.width, radius: basket_radius});
		        		o.setCoords();
		        		canvas_vars.canvas.calcOffset();
		  				canvas_vars.canvas.renderAll();
		  			break;
	        		case "MissSymbol" :
	        			var old_canvas_width = o.canvas_width;
		        		var change_ratio = old_canvas_width/canvas_vars.canvas.width;
		        		o.set({x1: o.x1 / change_ratio, y1: o.y1 / change_ratio, x2: o.x2 / change_ratio, y2: o.y2 / change_ratio, canvas_width: canvas_vars.canvas.width});
		        		o.setCoords();
		        		canvas_vars.canvas.calcOffset();
		        		canvas_vars.canvas.renderAll();
	        		break
	        	}
	    	})
	    })
	}

	function set_player_canvas_dimensions(canvas, background_img, player_canvas_height, player_canvas_width){
        canvas.setHeight(player_canvas_height);
        canvas.setWidth(player_canvas_width);
        background_img.scaleToHeight(player_canvas_height);
        canvas.setBackgroundImage(background_img, canvas.renderAll.bind(canvas), {
            top: 0,
            left: 0
        });
    }


	function populate_player_shot_chart(player, canvas, player_canvas_width){
		var make_radius = 5;
		<% @shot_chart_data.each do |shot|%>
    		var metadata = "<%=shot.metadata%>"
    		metadata = metadata.replace(/&quot;/g,'"');
    		metadata = JSON.parse(metadata.replace(/=&gt;/g, ':'));
    		var y_loc = parseFloat(metadata.y_loc) * player_canvas_width - 5;
    		var x_loc = parseFloat(metadata.x_loc) * player_canvas_width - 5;
    		var shot_val = parseInt(metadata.shot_val);
    		var player_id = "<%=shot.member_id%>";

    		if("<%=shot.stat_list_id%>" == "1" && parseInt(player_id) == player.id){
    			player.make_granules.push(metadata)
    			make = plot_make(y_loc, x_loc, make_radius, player_id, true, shot_val, null, null, player_canvas_width, canvas);
    			make.set({evented: false, selectable: false})
    		}
    		else if ("<%=shot.stat_list_id%>" == "2" && parseInt(player_id) == player.id){
    			player.miss_granules.push(metadata)
    			miss = plot_miss([x_loc, y_loc, x_loc , y_loc ], player_id, true, shot_val, null, null, player_canvas_width, canvas);
    			miss.set({evented: false, selectable: false})
    		}
    	<%end%>
	}

	function expand(module_num, button){
		var player_module = $("#player-module-" + module_num)
		var curHeight = player_module.height();
		var advanced_table = player_module.children(".player-advanced-stats");
		var shot_chart = player_module.children(".canvas-container")
		var per_minute_table = player_module.children(".player-per-minute-stats")
		var full_profile = player_module.children(".full-profile");
		if(advanced_table.css("display") == "none"){
			advanced_table.show();
			shot_chart.show()
			per_minute_table.show()
			full_profile.show()

			button.style.transform = "rotate(-135deg)";
			autoHeight = player_module.css('height', 'auto').height();
			player_module.height(curHeight).animate({
				height: autoHeight
			}, 275, function(){
				player_module.css('height', 'auto');
			});
		}
		
		else{
			advanced_table.hide();
			shot_chart.hide()
			per_minute_table.hide()
			full_profile.hide()
			autoHeight = player_module.css('height', 'auto').height();
			button.style.transform = "rotate(45deg)";
			player_module.height(curHeight).animate({
				height: autoHeight
			}, 275, function(){
				player_module.css('height', 'auto');
			})
		}
	}


	function insert_basic_data(row, player, is_per_minute){
		var insert_index = 0;
		var num_stats = display_stats.length

		for(j = 0 ;j < num_stats; j++){
			if(row.cells.length <= insert_index) var col = row.insertCell(insert_index);
			else var col = row.cells[insert_index];

			if(display_stats[j].display_type == "fraction"){
				insert_fraction_data(row, col, display_stats[j].display_priority, ++insert_index, player, true, is_per_minute);
			}
			else if (display_stats[j].display_type == "minutes"){
				insert_minutes_data(col, display_stats[j].display_priority, player, true, is_per_minute);
			}
			else{
				insert_standard_data(col, display_stats[j].display_priority, player, true, false, is_per_minute)
			}
			insert_index++;
		}	
	}

	function insert_team_advanced_row(row, i){
		var num_stats = display_stats_team_adv.length
		for(j = 0 ;j < num_stats + 1; j++){
			var col = row.insertCell(j);
			if (j == 0 && i > 0){
				column_header = "<%= @team.name %>";
				col.innerHTML += "<div>" + column_header + "</div>";
			}
			else if (i > 0 && j > 0){
				insert_team_adv_data(col, display_stats_team_adv[j - 1])
			}
		}
	}

	function insert_adv_data(row, player){
		var num_stats = display_stats_adv.length
		for(j = 0 ;j < num_stats; j++){
			var col = row.insertCell(j);
			col.innerHTML = find_player_stat(display_stats_adv[j].display_priority, player, true, true)
		}
	}

	

	/**********************************************************************************************************************************************/
	/**********************************************************************************************************************************************/
	/*************************************************************** <STAT TABLE> *****************************************************************/
	/**********************************************************************************************************************************************/
	/**********************************************************************************************************************************************/

	function find_header_index(display_priority, arr){
		var len = arr.length
		for(var i = 0; i < len; i++){
			if (parseInt(arr[i].display_priority) == display_priority){
				return i;
			}
		}
	}

	function find_player_stat_index(display_priority, arr){
		var len = arr.length
		for(var i = 0; i < len; i++){
			if (parseInt(arr[i].display_priority) == display_priority){
				return i;
			}
		}
	}


	function return_table_by_name(table_name){
		var return_table
		switch(table_name){
		case "team_stats_table" :
			return_table =  team_stats_table;
		case "adv_stats_team_table" :
			return_table =  adv_stats_team_table;
		}
		return return_table
	}



	/**********************************************************************************************************************************************/
	/**********************************************************************************************************************************************/
	/*************************************************************** <Populators> *****************************************************************/
	/**********************************************************************************************************************************************/
	/**********************************************************************************************************************************************/


	function populate_display_stats_basic(){
		<% @stat_table_columns.each do |display_stat| %>
			display_stats.push({"stat": "<%= display_stat[:stat_name] %>", "display_priority": "<%= display_stat[:display_priority] %>", "display_type" : "<%= display_stat[:display_type] %>", "percentage_string":  "<%= display_stat[:percentage_string] %>", "stat_list_id" : "<%= display_stat[:stat_list_id] %>"})
		<% end %>
	}

	function populate_display_stats_adv(){
		<% @adv_stat_table_columns.each do |display_stat| %>
			display_stats_adv.push({"stat": "<%= display_stat[:display_name] %>", "display_priority": "<%= display_stat[:display_priority] %>", "stat_name":  "<%= display_stat[:stat_name] %>", "stat_list_id" : "<%= display_stat[:stat_list_id] %>"})
		<% end %>
	}

	function populate_team_display_stats_adv(){
		<% @team_adv_stat_table_columns.each do |display_stat| %>
			display_stats_team_adv.push({"stat": "<%= display_stat[:display_name] %>", "display_priority": "<%= display_stat[:display_priority] %>", "stat_name":  "<%= display_stat[:stat_name] %>", "stat_list_id" : "<%= display_stat[:stat_list_id] %>", "is_opponent" : "<%= display_stat[:is_opponent] %>"})
		<% end %>
	}

	function populate_stat_array(){
		var i = 0;
		player_id_arr = [];
		<% @player_stats.each do |stat|%>
			var len = player_id_arr.length
			if(player_id_arr[len - 1] !=  "<%= stat.member_id%>"){
				player_id_arr.push("<%= stat.member_id%>");
				var player_obj = {"id" : "<%= stat.member_id%>", "name" : "<%= stat.nickname%>" , "stat_arr" : [], "adv_stat_arr" : []}
				player_stats.push(player_obj);
				i++;
			}
			player_stats[i-1].stat_arr.push({"value": "<%= stat.value%>", "stat_list_id" : "<%= stat.stat_list_id%>", "stat" : "<%= stat.stat%>","display_priority" : "<%= stat.display_priority%>"})
			if ("<%= stat.stat_list_id%>" == "16"){
				var seconds = "<%= stat.value%>"
				player_stats[i-1].minutes = parseInt(seconds)/60
			}
			player_stats[i-1].make_granules = []
			player_stats[i-1].miss_granules = []
		<%end%>

		var j = 0;

		<% @advanced_stats.each do |stat|%>
			if("<%= stat.member_id%>" != player_stats[j].id){
				j++;
			}
			player_stats[j].adv_stat_arr.push({"value": "<%= stat.value%>","stat_list_id" : "<%= stat.stat_list_id%>" ,"display_priority" : "<%= stat.display_priority%>", "stat" : "<%= stat.stat%>"})
		<%end%>
	}

	function populate_team_stats(){
		<% @team_stats.each do |stat| %>
			team_stat_array.push({"value": "<%= stat.value%>", "stat_list_id" : "<%= stat.stat_list_id%>", "display_priority" : "<%= stat.display_priority%>", "name" : "<%= @team.name %>"})
		<%end %>
	}

	function populate_opponent_stats(){
		<% if @opponent_stats && @opponent%>
			<% @opponent_stats.each do |stat| %>
				opponent_stat_array.push({"value": "<%= stat.value%>", "stat_list_id" : "<%= stat.stat_list_id%>", "display_priority" : "<%= stat.display_priority%>", "name" : "<%= @opponent.name %>"})
			<%end %>
		<% end %>
	}

	function populate_team_advanced_stats(){
		<% @team_advanced_stats.each do |stat| %>
			team_advanced_stat_array.push({"value": "<%= stat.value%>", "stat_list_id" : "<%= stat.stat_list_id%>", "display_priority" : "<%= stat.display_priority%>", "name" : "<%= @team.name %>", "is_opponent" : "<%= stat.is_opponent%>"})
		<%end %>
	}




	/**********************************************************************************************************************************************/
	/**********************************************************************************************************************************************/
	/*************************************************************** </Populators> ****************************************************************/
	/**********************************************************************************************************************************************/
	/**********************************************************************************************************************************************/



	/**********************************************************************************************************************************************/
	/**********************************************************************************************************************************************/
	/*************************************************************** <STAT TABLE> *****************************************************************/
	/**********************************************************************************************************************************************/
	/**********************************************************************************************************************************************/

	function insert_basic_player_stat_header(table){
		var insert_index = 0;
		var header = table.createTHead();
		var row = header.insertRow(0);
		var num_stats = display_stats.length
		for(i = 0; i < num_stats; i++){
			var col = row.insertCell(insert_index)
			col.innerHTML += "<button class = 'stat-table-button' onclick='sort_basic_table(" + display_stats[i].display_priority + ")'>" + display_stats[i].stat + "</button>";
			if(display_stats[i].display_type == "fraction"){
				insert_index++;
				var pct_col = row.insertCell(insert_index);
				pct_col.innerHTML = "<div>" + display_stats[i].percentage_string + "</div>"; 
			}
			insert_index++;
		}
	}

	function insert_basic_team_stat_header(table){
		var insert_index = 0;
		var header = table.createTHead();
		var row = header.insertRow(0);
		var num_stats = display_stats.length
		for(i = 0; i < num_stats; i++){
			var col = row.insertCell(insert_index)
			if (i > 0) {
				if(display_stats[i - 1].stat_list_id != 16){
					col.innerHTML += "<div>" + display_stats[i - 1].stat + "</div>";
					if(display_stats[i - 1].display_type == "fraction"){
						insert_index++;
						var pct_col = row.insertCell(insert_index);
						pct_col.innerHTML = "<div>" + display_stats[i - 1].percentage_string + "</div>"; 
					}
				}
			}
			insert_index++;
		}
	}

	function insert_adv_stat_header(table){
		var header = table.createTHead();
		var row = header.insertRow(0);
		var num_stats = display_stats_adv.length
		for(i = 0; i < num_stats; i++){
			var col = row.insertCell(i)
			col.innerHTML += "<button class = 'stat-table-button' onclick='sort_advanced_table(" + display_stats_adv[i].display_priority +")'>" + display_stats_adv[i].stat + "</button>";
		}
	}

	function insert_team_adv_stat_header(table){
		var header = table.createTHead();
		var meta_row = header.insertRow(0)
		var stat_row = header.insertRow(1)

		var blank_cell = meta_row.insertCell(0)
		var offense_four_factors = meta_row.insertCell(1)
		offense_four_factors.colSpan = "4";
		offense_four_factors.innerHTML = "Offense Four Factors"

		var defense_four_factors = meta_row.insertCell(2)
		defense_four_factors.colSpan = "4";
		defense_four_factors.innerHTML = "Defense Four Factors"

		var other_advanced = meta_row.insertCell(3)
		other_advanced.colSpan = "5";
		other_advanced.innerHTML = "Other Advanced"

		var num_stats = display_stats_team_adv.length
		for(i = 0; i < num_stats + 1; i++){
			var col = stat_row.insertCell(i)
			if (i > 0) {
				col.innerHTML += "<div>" + display_stats_team_adv[i - 1].stat + "</div>";
			}
		}
	}


	function insert_team_advanced_row(row, i){
		var num_stats = display_stats_team_adv.length
		for(j = 0 ;j < num_stats + 1; j++){
			var col = row.insertCell(j);
			if (j == 0 && i > 0){
				column_header = "<%= @team.name %>";
				col.innerHTML += "<div>" + column_header + "</div>";
			}
			else if (i > 0 && j > 0){
				insert_team_adv_data(col, display_stats_team_adv[j - 1])
			}
		}
	}

	function insert_advanced_row(row, i){
		var num_stats = display_stats_adv.length
		var player = player_stats[i-1];
		for(j = 0 ;j < num_stats + 1; j++){
			if(row.cells.length <= j){
				var col = row.insertCell(j);
			}
			else var col = row.cells[j];
			if (j == 0 && i > 0){
				col.innerHTML = "<div>" + player_stats[i-1].name + "</div>";
			}
			else if (i > 0 && j > 0){
				insert_standard_data(col, display_stats_adv[j - 1].display_priority, player, true, true, false)
			}
		}
	}

	function insert_basic_row(row, i, is_player, team){
		var insert_index = 0;
		var num_stats = (is_player) ? display_stats.length : display_stats.length -1;
		var player = (is_player) ? player_stats[i-1] : team;

		for(j = 0 ;j < num_stats + 1; j++){
			if(row.cells.length <= insert_index){
				var col = row.insertCell(insert_index);
			}
			else 
				var col = row.cells[insert_index];

			if (j == 0 && i > 0){
				if(is_player){
					column_header = player_stats[i-1].name;
				}else{
					column_header = team[0].name;
				}
				col.innerHTML = "<div>" + column_header + "</div>";
			}
			else if (i > 0 && j > 0){
				if(display_stats[j-1].display_type == "fraction"){
					insert_fraction_data(row, col, display_stats[j - 1].display_priority, ++insert_index, player, is_player, false);
				}
				else if (display_stats[j-1].display_type == "minutes"){
					if(is_player) insert_minutes_data(col, display_stats[j - 1].display_priority, player, is_player);
				}
				else{
					insert_standard_data(col, display_stats[j - 1].display_priority, player, is_player, false, false)
				}
			}
			insert_index++;
		}
	}

	function insert_team_adv_data(col, display_stat){
		var len = team_advanced_stat_array.length
		for(var i = 0; i < len; i++){
			if (display_stat.stat_list_id == team_advanced_stat_array[i].stat_list_id)
				if(display_stat.is_opponent == team_advanced_stat_array[i].is_opponent)
					col.innerHTML = team_advanced_stat_array[i].value
		}
	}

	


	function find_player_stat(display_priority, player, is_player, is_advanced, is_per_minute){
		var stat_arr;
		if(is_player){
			if(is_advanced) stat_arr = player.adv_stat_arr;
			else stat_arr = player.stat_arr;
		}
		// if player is really a team
		else stat_arr = player;

		var len = stat_arr.length
		
		for(var i = 0; i < len; i++){
			if(stat_arr[i].display_priority == display_priority){
				if(is_per_minute) { 
					var return_value = stat_arr[i].value * (per_minute_factor/player.minutes);
					return return_value.toFixed(2);
				}
				else return stat_arr[i].value;
			}
		}
	}

	function insert_standard_data(col, display_priority, player, is_player, is_advanced, is_per_minute){
		col.innerHTML = find_player_stat(display_priority, player, is_player, is_advanced, is_per_minute)
	}

	function insert_minutes_data(col, display_priority, player, is_player, is_per_minute){
		var stat = find_player_stat(display_priority, player, is_player);
		var seconds_str;
		if(is_per_minute){
			var player_minutes = minutes_p_q * 3;
			var player_seconds = 0;
		}
		else {
			var player_minutes = Math.floor(stat / 60)
			var player_seconds = stat - player_minutes * 60;
		}
		(player_seconds < 10) ? seconds_str = "0" + player_seconds.toString() : seconds_str = player_seconds.toString();
		col.innerHTML = player_minutes.toString() + ":" + seconds_str
	}

	function find_player_fraction_stat(display_priority, player, is_player){
		var stat_arr = (is_player) ? player.stat_arr : player
		var len = stat_arr.length
		var makes = 0;
		var misses = 0;
		var return_arr = [];
		for(var i = 0; i < len; i++){
			if(stat_arr[i].display_priority == display_priority){
				//misses all have odd stat_list_ids, makes all have even stat_lsit_ids
				if (parseInt(stat_arr[i].stat_list_id) % 2 == 0){
					misses = stat_arr[i].value
				}
				else 
					makes = stat_arr[i].value
			}
		}
		return_arr.push(makes);
		return_arr.push(misses)

		return return_arr;
	}

	function insert_fraction_data(row, col, display_priority, index, player, is_player, is_per_minute){
		if (row.cells.length <= index){
			var pct_col = row.insertCell(index)
		}
		else var pct_col = row.cells[index];
		make_miss = find_player_fraction_stat(display_priority, player, is_player);
		makes = parseInt(make_miss[0]);
		misses = parseInt(make_miss[1]);
		numerator = (is_per_minute) ? (makes * (per_minute_factor/player.minutes)).toFixed(1) : makes;
		denomenator = (is_per_minute) ? ((makes + misses) * (per_minute_factor/player.minutes)).toFixed(1) : makes + misses;
		col.innerHTML = numerator + "/" + denomenator;
		pct_col.innerHTML = (denomenator != 0) ? Math.round(numerator / denomenator * 100) + "%" : "0%"  
	}



	/**********************************************************************************************************************************************/
	/**********************************************************************************************************************************************/
	/*************************************************************** </STAT TABLE> ****************************************************************/
	/**********************************************************************************************************************************************/
	/**********************************************************************************************************************************************/



	// TODO: MAKE WORK FOR SMALL INDIVIDUAL SHOT CHARTS

	/**********************************************************************************************************************************************/
	/**********************************************************************************************************************************************/
	/*************************************************************** <SHOT CHARTS> ****************************************************************/
	/**********************************************************************************************************************************************/
	/**********************************************************************************************************************************************/
	

    function populate_shot_chart(canvas, canvas_width){

    	<% @shot_chart_data.each do |shot|%>
    		var metadata = "<%=shot.metadata%>"
    		metadata = metadata.replace(/&quot;/g,'"');
    		metadata = JSON.parse(metadata.replace(/=&gt;/g, ':'));
    		var y_loc = parseFloat(metadata.y_loc) * canvas_width - 5;
    		var x_loc = parseFloat(metadata.x_loc) * canvas_width - 5;
    		var shot_val = parseInt(metadata.shot_val);
    		var player_id = "<%=shot.member_id%>";
    		
    		if("<%=shot.stat_list_id%>" == "1" ){
    			make = plot_make(y_loc, x_loc, make_radius, player_id, true, shot_val, null, null, canvas_width, canvas);
    			make.set({evented: false, selectable: false})
    		}
    		else if ("<%=shot.stat_list_id%>" == "2" ){
    			miss = plot_miss([x_loc, y_loc, x_loc , y_loc ], player_id, true, shot_val, null, null, canvas_width, canvas);
    			miss.set({evented: false, selectable: false})
    		}
    	<%end%>
    }

    function shot_chart_button(id, button, canvas){
		canvas.getObjects().forEach(function(o){
			if(o.type != "Basket"){	
				o.set({opacity: 1,
				})
			}
		});	

		canvas.getObjects().forEach(function(o){
			if(o.type != "Basket"){
				if(o.id != id || o.player == false){
					o.set({opacity: 0,
					})
				}
			}
		});	
		canvas.renderAll();
	}

    function populate_player_shot_charts(){
		var len = player_stats.length;
		var html_string = "";
		for(var i = 0; i < len; i++){
			html_string += "<button class = 'shot-chart-button' type = 'button' onclick='shot_chart_button(" + player_stats[i].id +", this)'> " + player_stats[i].name + " </button>"
		}
		$("#player-shot-chart-buttons").html(html_string)

		$("#player-shot-chart-buttons").css("grid-template-rows", "repeat( "+ len/2 + ", 81px)"); ;
	}

	function to_team_shot_chart(){
		canvas.getObjects().forEach(function(o){
			if(o.type != "Basket"){	
				o.set({opacity: 1})
			}
		});
		canvas.getObjects().forEach(function(o){
			if(o.type != "Basket"){	
				if(o.player == false ){
					o.set({opacity: 0})
				}
			}
		});	
		canvas.renderAll();
		
	}


	/**********************************************************************************************************************************************/
	/**********************************************************************************************************************************************/
	/*************************************************************** </SHOT CHARTS> ***************************************************************/
	/**********************************************************************************************************************************************/
	/**********************************************************************************************************************************************/



</script>