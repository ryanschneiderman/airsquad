<%=render "layouts/small_header"%>
<div id = "show-grid" >
    <div id = "play-scrollbar-wrapper">
        <div class="progression-block-header"><%=@play.name%></div>
        <div id = "play-scrollbar">
            <%@progressions.each do |progression|%>
            <div class = "progression-block" >
                <div class = "progression-img-wrapper" id = "progression-img-<%=progression.index%>">
                    <button onclick = "switch_progression(<%=progression.index%>, <%=progression.id%>)">
                        <%= image_tag(url_for(progression.play_image), :alt => "progression", :class => "progression-img") %>
                        <div class = "progression-num" id = "progression-num-<%=progression.index%>"><%=progression.index+1%></div>
                    </button>
                </div>
            </div>
            <%end%>
        </div>
    </div>
    <div class = "plays-with-arrows">
        <canvas id ="c" class = "show-canvas"></canvas>
    </div>
    <div id = "toolbar-wrapper">
        <div id = "expand-collapse" onclick = "expandCollapseToolbar()"> 
            <div id = "expand-wrapper"style = "display: none;">
                <button class = "left expand-collapse-arrow" id = "expand-arrow" onclick = "expandCollapseToolbar()"></button>
            </div>
            <div id = "collapse-wrapper">
                <button class = "right expand-collapse-arrow" id = "collapse-arrow" onclick = "expandCollapseToolbar()"></button>
            </div>
        </div>
        <div id = "tool-bar" class = "show-toolbar">
            <div id = "drawing-buttons-wrapper">
                <div class = "toolbar-heading">Key</div>
                <div id = "show-key">
                  <div id = "run" class = "drawing-button" type = "button">
                    <div class = "drawing-button-name">Run</div>

                    <div class = "drawing-button-arrow">
                      <%= image_tag("white-arrow.png", :alt => "information", :class => "drawing-img") %>
                    </div>
                  </div>
                  
                  <div id = "pass" class = "drawing-button" type = "button" >
                    <div class = "drawing-button-name">Pass</div>
                    <div class = "drawing-button-arrow">
                        <%= image_tag("dotted-arrow.png", :alt => "information", :class => "drawing-img") %>
                    </div>
                  </div>
                  
                  <div id = "drive" class = "drawing-button" type = "button" >
                    <div class = "drawing-button-name">Dribble</div>
                    <div class = "drawing-button-arrow ">
                      <div class="line dribble-line"></div>
                      <div class="triangle-point dribble-triangle"></div>
                    </div>
                  </div>
                  
                  <div id = "screen" class = "drawing-button" type = "button" >
                    <div class = "drawing-button-name">Screen</div>
                    <div class = "drawing-button-arrow">
                        <%= image_tag("screen-line.png", :alt => "information", :class => "drawing-img") %>
                    </div>
                  </div> 
                  <div id = "has-ball" class = "drawing-button" type = "button">
                    <div class = "drawing-button-name">Has Ball</div>
                       <%= image_tag("basketball-icon.png", :alt => "basketball", :class => "basketball-icon") %>
                  </div>  
                </div>
            </div>
            <div id = "other-buttons-wrapper">
                <div id = "other-play-buttons-key">
                    <button class = "other-button" type ="button" onclick="change_progression(1)">
                        <div class="tooltiptext">Animate Step</div>
                        <%= image_tag("animate-icon.png", :alt => "download", :class => "other-button-icon") %>
                    </button>
                    <button id = "download" class = "other-button" type = "button" onclick="downloadPlay()">
                        <div class="tooltiptext">Download Play</div>
                        <%= image_tag("download-icon.png", :alt => "download", :class => "other-button-icon") %>
                    </button> 
                </div>
            </div>
        </div>
    </div>
	
    

</div>

<%= render 'progressions/js_objects' %>
<%= render 'progressions/javascript' %>
<script>
    $("#progression-img-0 .progression-img").addClass("progression-img-current")
    $("#progression-num-0").addClass("progression-num-current")
    $("#play-scrollbar-wrapper").css("top", $("#header-outer").outerHeight()-5)
    $("#show-grid").css("margin-top", $("#header-outer").outerHeight())
    $("#toolbar-wrapper").css("top", $("#header-outer").outerHeight()-5)

    $(".show-toolbar").width(120)
    $( window ).resize(function() {
        //$("#play-scrollbar").css("height", "90vh")
    });
        //activate_header()
        var index = 0
        var line_type;
    
        var line, isDown, evented;
        var anchorRadius = 3;
        var anchorOffset = anchorRadius - .5;
        var animate_time = 900;

        var convert = function(convert){
            return $("<span />", { html: convert }).text();
            //return document.createElement("span").innerText;
        };
        var json_diagrams = []
        <% @progressions.each do |progression| %>
            json_diagrams.push({"json": "<%=progression.json_diagram%>" , "canvas_width" : parseFloat("<%=progression.canvas_width%>"), "notes" : convert("<%=progression.notes%>"), "progression_id" : "<%=progression.id%>"});
        <%end%>

        //canvas.requestRenderAll.bind(canvas);
        var canvas = new fabric.Canvas("c",{
            targetFindTolerance: 15,
             perPixelTargetFind: true,
             preserveObjectStacking: true,
             selection: false
        }); 
         var play_type = "<%=@play_type%>";;
        if(play_type == 2){
          var canvas_width = window.innerWidth * .55;
          var canvas_height = canvas_width * .6;
          var playerRadius = canvas_height * .025;
        }
        else{
          var canvas_width = window.innerWidth * .635;
          var canvas_height = canvas_width * .75;
          var playerRadius = canvas_height * .03;
        }

        if(play_type == 2){
            $(".plays-with-arrows").addClass("fullcourt")
        }
        else{
            $(".plays-with-arrows").addClass("halfcourt")
        }
        
        canvas.setHeight(canvas_height);
        canvas.setWidth(canvas_width);


        var progression_notifications = []
        insert_progression_change_style()
        switch_progression(index, json_diagrams[0].progression_id);

        

        

        function insert_progression_change_style(){
            <%@progression_notifications.each do |notif|%>
                <%notif.member_data["progression_ids"].each do |progr|%>
                    progression_notifications.push({"progression_id": <%=progr%>, "member_notif_id" : <%=notif.member_notif_id%>})
                    $("#progression-<%=progr%>").addClass("progression-change")
                <%end%>
            <%end%>
        }

        function highlightPlay(index){
            $(".progression-img").removeClass("progression-img-current")
            $(".progression-num").removeClass("progression-num-current")
            $("#progression-img-"+index+" .progression-img").addClass("progression-img-current")
            $("#progression-num-"+index+"").addClass("progression-num-current")
        }

       

        function change_progression(change){
            var max_depth = 0;
            if(change > 0){
                startAnimation()
            }

            max_depth = getAnimationTime()
            console.log("max_depth: " + max_depth)

        	index = index + change;
            setTimeout(function(){ 
                if(index > json_diagrams.length -1){
                    switch_progression(0)
                }
                else if (index < 0){
                    switch_progression(json_diagrams.length -1)
                }
                else{
                    switch_progression(index);
                }
                highlightPlay(index)
            }, animate_time *  max_depth);  
        }



        function switch_progression(new_index, progression_id){
            highlightPlay(new_index)
            $(".progression-notes-text").html(json_diagrams[new_index].notes)
            remove_progression_notification(progression_id)
            load_JSON_canvas(new_index)
        }

        function remove_progression_notification(progression_id){
            // Send ajax request with the progression that has been clicked on
            var url = "/plays/"+ <%=@play.id%> +"/progressions/remove_progression_notification"
            var array_sub = progression_notifications.filter(item => {
              if (item.progression_id == progression_id) {
                return item;
              }
            });
            var data = {member_notif_array : array_sub}
            $("#progression-"+progression_id).removeClass("progression-change")
            $.ajax({
                url: url,
                beforeSend: function(xhr) {xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'))},
                type: "post",
                data_type: 'json',
                data: data,
                success: function(result){
                     
                }
            });
        }

        function load_JSON_canvas(new_index){
            var json_diagrams_len = json_diagrams.length;
            index = new_index;
           
            if(new_index > json_diagrams_len -1){
                index = 0;
            }
            else if (new_index < 0 ){
                index = json_diagrams_len -1;
            }

            var old_canvas_width = json_diagrams[index].canvas_width;
            var width_ratio = old_canvas_width/canvas.width;

            var json_data = json_diagrams[index].json.replace(/&quot;/g,'"');
            insertJSONinCanvas(json_data, old_canvas_width, width_ratio)
            $("#progression_index").html(index+1);
        }

        function insertJSONinCanvas(json_data, old_canvas_width, width_ratio){
            canvas.loadFromJSON(json_data, function() {
                var ball;
                var player_with_ball;
                var objs = canvas.getObjects().map(function(o) {
                    o.set({lockMovementX: true, lockMovementY: true, selectable: false, evented: false,})
                    if (o.type == "MoveLine"){
                        o.toAnchorPoint.x = o.toAnchorPoint.x / width_ratio
                        o.toAnchorPoint.y = o.toAnchorPoint.y / width_ratio
                        o.path[0][1] = o.path[0][1] /width_ratio
                        o.path[0][2] = o.path[0][2] /width_ratio
                        o.path[1][1] = o.path[1][1] /width_ratio
                        o.path[1][2] = o.path[1][2] /width_ratio
                        o.path[1][3] = o.path[1][3] /width_ratio
                        o.path[1][4] = o.path[1][4] /width_ratio
                        o.width = o.width / width_ratio
                        o.height = o.height / width_ratio
                        o.pathOffset.x = o.pathOffset.x / width_ratio
                        o.pathOffset.y= o.pathOffset.y / width_ratio
                        o.left = o.left /width_ratio;
                        o.top = o.top/width_ratio
                        o.setCoords()
                        o.moveTo(103)
                        
                    }
                    else{
                        o.set({left: o.left / width_ratio, top: o.top/width_ratio})
                        if(o.type == "circle"){
                            o.set({lockMovementX: true, lockMovementY: true, selectable: false, radius: o.radius / width_ratio})
                            o.moveTo(102)
                        }
                        else if (o.type == "rect"){
                            o.set({lockMovementX: true, lockMovementY: true, selectable: false, evented: false, width: o.width / width_ratio, height: o.height / width_ratio})
                        }
                        else if (o.type == "text"){
                            o.set({lockMovementX: true, lockMovementY: true, selectable: false, evented: false, fontSize: o.fontSize / width_ratio})
                            o.moveTo(101);
                        }
                        else if (o.type == "textbox"){
                            var new_text = o.text.replace(/&#39;/g,"'")
                            // Substituting quotation placeholder for real quotation
                            new_text = new_text.replace(/~~/g, '"')
                            o.text = new_text;
                        }
                        else if (o.type == "basketball"){
                            ball = o;
                        }
                        else if (o.type == "PlayerCircle"){
                            canvas.getObjects().forEach(function(obj) {
                                if(obj.id == o.id && obj.type == "text") {
                                    o.text = obj;
                                    obj.moveTo(20)
                                }
                            });
                            if(o.has_ball == true){
                                player_with_ball = o;
                            }
                            o.toAnchorPoint.x = o.toAnchorPoint.x / width_ratio
                            o.toAnchorPoint.y = o.toAnchorPoint.y / width_ratio
                            o.strokeWidth = o.strokeWidth/width_ratio;
                            o.set({radius: o.radius / width_ratio})
                            o.moveTo(104)
                            o.setCoords()
                            populateLines(o)
                        }
                        else if (o.type == "MoveLine"){
                            console.log("In moveline")
                            o.toAnchorPoint.x = o.toAnchorPoint.x / width_ratio
                            o.toAnchorPoint.y = o.toAnchorPoint.y / width_ratio
                            o.path[0][1] = o.path[0][1] /width_ratio
                            o.path[0][2] = o.path[0][2] /width_ratio
                            o.path[1][1] = o.path[1][1] /width_ratio
                            o.path[1][2] = o.path[1][2] /width_ratio
                            o.path[1][3] = o.path[1][3] /width_ratio
                            o.path[1][4] = o.path[1][4] /width_ratio

                            //o.set({x1: o.x1 / width_ratio, x2: o.x2 / width_ratio, y1: o.y1 / width_ratio, y2: o.y2 / width_ratio})
                            o.moveTo(103)
                            //o.setCoords()  
                        }
                        else if (o.type == "LineWithArrow" || o.type == "DribbleLine" || o.type == "PassLine" || o.type == "ScreenLine"){
                            console.log("In other lines")
                            o.toAnchorPoint.x = o.toAnchorPoint.x / width_ratio
                            o.toAnchorPoint.y = o.toAnchorPoint.y / width_ratio
                            o.set({x1: o.x1 / width_ratio, x2: o.x2 / width_ratio, y1: o.y1 / width_ratio, y2: o.y2 / width_ratio})
                            o.moveTo(103)
                            o.setCoords()  
                        }
                        o.setCoords()
                        return o;
                    }
                    
                });
                if(player_with_ball){
                    player_with_ball.ball = ball;
                    setBallPos(player_with_ball);
                }
                clearSelection()
                populatePasserRefs()
                canvas.renderAll();
            }); 
        }

        
</script>



