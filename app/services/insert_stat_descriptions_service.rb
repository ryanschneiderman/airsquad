class InsertStatDescriptionsService
	def initialize()
	end

	def call()
		efg = StatList.find_by_id(18)
		efg.update(stat_description: "This statistic accounts for the fact that a 3-point field goal is worth more than a 2 point field goal. For example, if Player A shoots 3 for 5 with no threes and Player B shoots 2 for 5 with two threes, they both contribute 6 points from field goals. Thus, they would have the same effective field goal percentage (60%). The formula is (FG + 0.5 * 3P) / FGA")
		ts = StatList.find_by_id(19)
		ts.update(stat_description: "This statistic is like EFG% except it also accounts for free throw shooting efficiency. The formula is (PTs / (2 * FGA + 0.44 * FTA))")
		linper = StatList.find_by_id(20)
		linper.update(stat_description: "This statistic is an estimate of John Hollinger’s Player efficiency rating. Since Hollinger’s version requires league-wide data, it is impossible to calculate with just team stats. Linear PER was created by using linear weights to estimate a player’s PER. See <a href = https://bleacherreport.com/articles/113144-cracking-the-code-how-to-calculate-hollingers-per-without-all-the-mess>here</a> for more information. ")
		ptar = StatList.find_by_id(21)
		ptar.update(stat_description: "This statistic is a measure of what percentage of a player's shots come from3 point range, a good gauge of how they're utilized offensively. The formula is (3PA / FGA).")
		ftar = StatList.find_by_id(22)
		ftar.update(stat_description: "Free throw rate is the ratio of free throws attempted per field goal attempted. It is useful to gauge where a player tends to take shots from. A low FTAr usually indicates a player takes a lot of jump shots or shies away from contacts whereas a high FTAr indicates a strong interior presence. The formula is (FTA / FGA).")
		usg = StatList.find_by_id(23)
		usg.update(stat_description: "Usage rate is “an estimate of the percentage of team plays used by a player while he was on the floor”. The formula is: 100 * ((FGA + 0.44 * FTA + TOV) * (Team Minutes / 5)) / (Minutes Played * (Team FGA + 0.44 * Team FTA + Team TOV)).")
		ortg = StatList.find_by_id(24)
		ortg.update(stat_description: "Offensive Rating is an estimation of a players’ points produced per 100 possessions. Taken with Usage Rate, one can gain an understanding of the offensive impact of a player. Created by Dean Oliver, author of “Basketball on Paper”, more info can be found about offensive and defensive rating <a href =https://basketball-reference.com/about/ratings.html>here</a>")
		drtg = StatList.find_by_id(25)
		drtg.update(stat_description: "Defensive Rating is an estimation of a players’ points allowed per 100 possessions. Created by Dean Oliver, author of “Basketball on Paper”, more info can be found about offensive and defensive rating <a href = https://basketball-reference.com/about/ratings.html>here </a> ")
		netrtg = StatList.find_by_id(26)
		netrtg.update(stat_description: "Net Rating is the difference of Offensive Rating and Defensive rating. more info can be found about offensive and defensive rating <a href = https://basketball-reference.com/about/ratings.html>here </a>")
		offeff = StatList.find_by_id(30)
		offeff.update(stat_description: "Offensive efficiency is like offensive rating (an estimate of points produced per 100 possessions) but at the team level instead of the individual level. ")
		defeff = StatList.find_by_id(31)
		defeff.update(stat_description: "Defensive efficiency is like defensive rating (an estimate of points allowed per 100 possessions) but at the team level instead of the individual level.")
		offreb = StatList.find_by_id(33)
		offreb.update(stat_description: "Offensive rebound percentage is “an estimate of the percentage of available offensive rebounds a player grabbed while he was on the floor”. The formula is : 100 * (ORB * (Team Minutes / 5)) / (Minutes Played * (Team ORB + Opp DRB))")
		defreb = StatList.find_by_id(34)
		defreb.update(stat_description: "Defensive rebound percentage is “an estimate of the percentage of available defensive rebounds a player grabbed while he was on the floor”. The formula is : 100 * (DRB * (Team Minutes / 5)) / (Minutes Played * (Team DRB + Opp ORB))")
		totreb = StatList.find_by_id(35)
		totreb.update(stat_description: "Total rebound percentage is “an estimate of the percentage of available rebounds a player grabbed while he was on the floor”. The formula is: 100 * (TRB * (Team Minutes / 5)) / (Minutes * (Team TRB + Opp TRB))")
		stl = StatList.find_by_id(36)
		stl.update(stat_description: "Steal Percentage is “an estimate of the percentage of opponent possessions that end with a steal by the player while he was on the floor.” The formula is: 100 * (STL * (Team Minutes / 5)) / (Minutes Played * Opp Poss)")
		blk = StatList.find_by_id(37)
		blk.update(stat_description: "Block percentage is an estimate of the percentage of opponent two-point field goal attempts blocked by the player while he was on the floor. The formula is: 100 * (BLK * (Team Minutes / 5)) / (Minutes Played * (Opp FGA - Opp 3PA)).")
		tov = StatList.find_by_id(38)
		tov.update(stat_description: "Turnover percentage is an estimate of turnovers per 100 possessions. The formula is:  100 * TOV / (FGA + 0.44 * FTA + TOV)")
		ast = StatList.find_by_id(39)
		ast.update(stat_description: "Assist percentage is “an estimate of the percentage of teammate field goals a player assisted while he was on the floor.” The formula is 100 * AST / (((Minutes Played / (Team Minutes / 5)) * Team FG) - FG).")
		obpm = StatList.find_by_id(40)
		obpm.update(stat_description: "Offensive Box plus minus is like Box Plus Minus, but with different coefficients to estimate a player’s offensive contribution. For information on Box Plus minus see <a href = https://www.basketball-reference.com/about/bpm.html> here </a>.")
		bpm = StatList.find_by_id(42)
		bpm.update(stat_description: "Box Plus Minus is a box score-based metric for evaluating basketball players' quality and holistic contribution to the team. It estimates the points per 100 possessions that a player contributed above a league-average player, translated to an average team. For more information on Box Plus minus see <a href =  https://www.basketball-reference.com/about/bpm.html> here </a>. ")
		dbpm = StatList.find_by_id(41)
		dbpm.update(stat_description: "Defensive Box Plus minus is an estimation of a player’s defensive contribution to overall Box Plus Minus. It is the difference between BPM and OBPM. For information on Box Plus minus see <a href = https://www.basketball-reference.com/about/bpm.html> here </a>.")
		poss = StatList.find_by_id(43)
		poss.update(stat_description: "A possession is counted when a player, (1) attempts a field goal, (2) misses a shot and does not get the offensive rebound, (3) turns the ball over, (4) goes to the line for two or three shots.")
		pace = StatList.find_by_id(48)
		pace.update(stat_description: "Pace factor is an estimate of the number of possessions per game by a team. The formula is: Minutes per game * ((Team Poss + Opp Poss) / (2 * (Team minutes / 5))")
		ftr = StatList.find_by_id(49)
		ftr.update(stat_description: "Free throw rate is a measure of how often a team or player gets to the line and how efficient they are at making them. The formula is FT / FGA.")
	end

end

